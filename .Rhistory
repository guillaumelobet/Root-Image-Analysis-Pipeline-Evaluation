if(i == 2) pl2 <- pl
}
pdf(paste0(base.dir,"/00_data/figures/heatmap-shape-corr.pdf"), width = 10, height=10)
c(pl1, pl2, layout = c(2, 1), merge.legends = F)
dev.off()
# Then we look if there are relationship between the shape variables themselves
r2.mat <- matrix(0, nrow = length(shape.list), ncol=length(shape.list))
colnames(r2.mat) <- shape.list
rownames(r2.mat) <- shape.list
corr.mat <- matrix(0, nrow = length(shape.list), ncol=length(shape.list))
colnames(corr.mat) <- shape.list
rownames(corr.mat) <- shape.list
shape.m <- shape[shape$specie == "monocot",]
shape.d <- shape[shape$specie == "dicot",]
for(da1 in shape.list){
for(da2 in shape.list){
if(da1 != da2){
fit.m <- lm(shape.m[[da1]] ~ shape.m[[da2]])
r2.m <- round(summary(fit.m)$r.squared, 4)
fit.d <- lm(shape.d[[da1]] ~ shape.d[[da2]])
r2.d <- round(summary(fit.d)$r.squared, 4)
r2.mat[da1, da2] <- r2.m
r2.mat[da2, da1] <- r2.d
corr.mat[da1, da2] <- cor(shape.m[[da1]] , shape.m[[da2]])#r2.m
corr.mat[da2, da1] <- cor(shape.d[[da1]] , shape.d[[da2]])#r2.d
}
}
}
plo <- levelplot(r2.mat,
col.regions=rgb(ramp(seq(0, 1, length = 1000)), max = 255),
at = seq(0, 1, length.out=100),
scales=list(x=list(rot=45, cex=1.5), y=list(cex=1.5), xlab=list(cex=.5)),
xlab = "MONOCOTS", ylab = "DICOTS")
pdf(paste0(base.dir,"/00_data/figures/heatmap-shape-internal.pdf"), width = 8, height=8)
plo
dev.off()
plo
plo <- levelplot(corr.mat,
col.regions=rgb(ramp.corr(seq(0, 1, length = 1000)), max = 255),
at = seq(-1, 1, length.out=100),
scales=list(x=list(rot=45, cex=1.5), y=list(cex=1.5), xlab=list(cex=.5)),
xlab = "MONOCOTS", ylab = "DICOTS")
pdf(paste0(base.dir,"/00_data/figures/heatmap-shape-internal-corr.pdf"), width = 8, height=8)
plo
dev.off()
plo
#---------------------------------------------------------------
#---------------------------------------------------------------
# PREDICTION ANALYSES
#---------------------------------------------------------------
#---------------------------------------------------------------
# An important feature of image descriptors is to be able to discriminate the different genotypes between them.
# Knowing how many and which descriptors are needed can indeed speed up the overall analysis by removing
# unnecessary metrics (that could take time to acquire).
# Here, we used a Linear Discriminant Analysis (LDA) in order to estimate the prediction power of each variables.
# Prediction power was estimated by (1) creating a model with half of the indivudas of each synthetype and
# (2) using the model to predict the synthetype of the remaining plants.
# The prediction accuracy was computed multiple times, by iterativelly adding new descriptors to the model. At each
# iteration, the added descriptor was the one that would increase the most the global accuracy of the model.
morpho <- c("length","area","diam_mean","tip_count")
geo <- c("width", "depth", "width_depth_ratio","com_x", "com_y",
"convexhull", "exploration", "width50", "count50",
"PL.PC1", "PL.PC2", "PL.PC3")
to_analyse <- c(morpho, geo)
ind <- match(to_analyse, colnames(descr))
ind.g <- match("group", colnames(descr))
lda.data.small <- NULL
done <- c()
for(sp in species){
temp <- descr[descr$specie == sp,]
descr.small <- temp[temp$depth < max(temp$depth)/3,]
ind <- match(to_analyse, colnames(descr.small))
done <- c()
acc.all <- c()
for(k in 1:length(ind)){
max <- 0
keep <- 0
for(i in 1:length(ind)){
temp <- c(done, ind[i])
fit <- lda(group ~ ., data=descr.small[descr.small$id <= 5, c(temp, ind.g)])
fit.values <- predict(fit, descr.small[descr.small$id > 5, c(temp, ind.g)])
ct <- table(fit.values$class, descr.small$group[descr.small$id > 5])
acc <- round(sum(diag(prop.table(ct)))*100, 2)
if(acc > max){
max <- acc
keep <- i
}
}
done <- c(done, ind[keep])
acc.all <- c(acc.all, max)
ind <- ind[-keep]
message(done)
message(ind)
message(max)
message("--------------")
}
names <- done
for(i in 1:length(done)) names[i] <- colnames(descr)[done[i]]
temp <- data.frame(names, acc.all, id=c(1:length(names)), species = sp)
lda.data.small <- rbind(lda.data.small, temp)
}
temp <- ind.shape
for(i in 1:length(ind.shape)) temp[i] <- colnames(descr)[ind.shape[i]]
#---------------
lda.data <- NULL
done <- c()
for(sp in species){
descr.small <- descr[descr$specie == sp,]
ind <- match(to_analyse, colnames(descr.small))
done <- c()
acc.all <- c()
for(k in 1:length(ind)){
max <- 0
keep <- 0
for(i in 1:length(ind)){
temp <- c(done, ind[i])
fit <- lda(group ~ ., data=descr.small[descr.small$id <= 5, c(temp, ind.g)])
fit.values <- predict(fit, descr.small[descr.small$id > 5, c(temp, ind.g)])
ct <- table(fit.values$class, descr.small$group[descr.small$id > 5])
acc <- round(sum(diag(prop.table(ct)))*100, 2)
if(acc > max){
max <- acc
keep <- i
}
}
done <- c(done, ind[keep])
acc.all <- c(acc.all, max)
ind <- ind[-keep]
message(done)
message(ind)
message(max)
message("--------------")
}
names <- done
for(i in 1:length(done)) names[i] <- colnames(descr)[done[i]]
temp <- data.frame(names, acc.all, id=c(1:length(names)), species = sp)
lda.data <- rbind(lda.data, temp)
}
temp <- ind.shape
for(i in 1:length(ind.shape)) temp[i] <- colnames(descr)[ind.shape[i]]
#---------------
plotssmall <- list()
for(sp in species){
temp <- lda.data.small[lda.data.small$species == sp,]
temp$type <- "geometry"
temp$type[temp$names %in% morpho] <- "morphology"
plotssmall[[length(plotssmall) + 1]] <- ggplot(temp, aes(reorder(names, id), acc.all, fill=type)) +
geom_line(aes(group="none")) +
geom_hline(yintercept = 90, lty=2) +
geom_point(size=5, pch=21) +
ylim(c(20,100)) +
# scale_x_discrete(labels=lda.data$names) +
scale_fill_manual(values=c("white", "black")) +
theme_bw() +
# scale_y_continuous(breaks = seq(60, 100, 20)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none", text = element_text(size=20),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) +
ggtitle(toupper(sp)) +
xlab("") +
ylab("Prediction accuracy [%]\n")
}
plots <- list()
for(sp in species){
temp <- lda.data[lda.data$species == sp,]
temp$type <- "geometry"
temp$type[temp$names %in% morpho] <- "morphology"
plots[[length(plots) + 1]] <- ggplot(temp, aes(reorder(names, id), acc.all, fill=type)) +
geom_line(aes(group="none")) +
geom_hline(yintercept = 90, lty=2) +
geom_point(size=5, pch=21) +
ylim(c(20,100)) +
# scale_x_discrete(labels=lda.data$names) +
scale_fill_manual(values=c("white", "black")) +
theme_bw() +
# scale_y_continuous(breaks = seq(60, 100, 20)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none", text = element_text(size=20),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) +
ggtitle(toupper(sp)) +
xlab("") +
ylab("Prediction accuracy [%]\n")
}
grid.arrange(plotssmall[[1]], plots[[1]],plotssmall[[2]], plots[[2]], ncol=2)
g <- arrangeGrob(plotssmall[[1]], plots[[1]],plotssmall[[2]], plots[[2]], ncol=2)
ggsave(paste0(base.dir,"/00_data/figures/precision-analysis.pdf"), g, width=16, height=16)
ggplot(descr, aes(x=depth)) +
geom_density(colour="white", alpha=0.8, fill="grey") +
geom_vline(xintercept = max(descr$depth)/2, lty=2) +
ylab("density [-]\n") +
xlab("\ndepth [cm]") +
theme_classic() +
theme(legend.position = "none", text=element_text(size=20),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) +
ggsave(file=paste0(base.dir,"/00_data/figures/hist-depth.pdf"), width = 5, height = 4)
ggplot(descr, aes(length)) +
geom_bar()
ggplot(descr[descr$id == 1,], aes(factor(group),length)) +
geom_bar()
ggplot(descr[descr$id == 1,], aes(factor(group),length)) +
geom_bar(stat="identity")
ggplot(descr[descr$id == 1 & descr$group < 500,], aes(factor(group),length)) +
geom_bar(stat="identity")
temp <- descr[descr$id == 1 & descr$group < 200,]
temp <- temp[sort(temp$length),]
temp$length
temp <- temp[order(temp$length),]
temp$length
ggplot(temp, aes(factor(group),length)) +
geom_bar(stat="identity")
temp$group <- c(1:nrow(temp))
ggplot(temp, aes(factor(group),length)) +
geom_bar(stat="identity")
temp <- temp[!is.na(temp$length),]
temp$group <- c(1:nrow(temp))
ggplot(temp, aes(factor(group),length)) +
geom_bar(stat="identity")
ggplot(temp, aes(factor(group),area)) +
geom_bar(stat="identity") +
theme(axis.line=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
temp <- descr[descr$id == 1 & descr$group < 200,]
temp <- temp[order(temp$area),]
temp <- temp[!is.na(temp$area),]
temp$group <- c(1:nrow(temp))
ggplot(temp, aes(factor(group),area)) +
geom_bar(stat="identity") +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.title.x=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
temp <- descr[descr$id == 1 & descr$group < 100,]
temp <- temp[order(temp$area),]
temp <- temp[!is.na(temp$area),]
temp$group <- c(1:nrow(temp))
ggplot(temp, aes(factor(group),area)) +
geom_bar(stat="identity") +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggplot(temp, aes(factor(group),area)) +
geom_bar(stat="identity") +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),legend.position="none",
panel.background=element_blank(),panel.grid.major=element_blank(),plot.background=element_blank())
temp <- descr[descr$id == 1 & descr$group < 100,]
temp <- temp[order(temp$area),]
temp <- temp[!is.na(temp$area),]
temp$group <- c(1:nrow(temp))
ggplot(temp, aes(factor(group),area)) +
geom_bar(stat="identity") +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),legend.position="none",
panel.background=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggplot(temp, aes(factor(group),area)) +
geom_bar(stat="identity") +
theme(axis.text.x=element_blank(),
axis.title.x=element_blank(),legend.position="none",
panel.background=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank()) +
ggsave("~/Desktop/distri.png", width=10, height=6)
ggplot(temp, aes(factor(group),area)) +
geom_bar(stat="identity") +
theme(text = element_text(size=25), axis.text.x=element_blank(),
axis.title.x=element_blank(),legend.position="none",
panel.background=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))
ggplot(temp, aes(factor(group),area)) +
geom_bar(stat="identity") +
theme(text = element_text(size=25), axis.text.x=element_blank(),
axis.title.x=element_blank(),legend.position="none",
panel.background=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) +
ggsave("~/Desktop/distri.png", width=10, height=6)
pairs <- data.frame(data=c("tot_root_length", "n_laterals", "depth"),
descr=c("length", "tip_count", "depth"),
stringsAsFactors = F)
names <- data.frame(data=c("Total root length [cm]", "Number of lateral roots [-]", "Root system depth [cm]"),
descr=c("Estimated length [cm]", "Estimated tip count [-]", "Estimated depth [cm]"),
stringsAsFactors = F)
for(p in 1:nrow(pairs)){
temp <- data.frame(x=data[[pairs$data[p]]], y=descr[[pairs$descr[p]]], z=data[["tot_root_length"]], specie = data$specie)
# Plot the error
g1 <- ggplot(temp, aes(x, y, colour=specie)) +
geom_point(alpha=0.8, size=2) +
geom_abline(intercept = 0, slope = 1, alpha=0.5) +
facet_wrap(~specie) +
theme_classic() +
theme(legend.position = "none", text=element_text(size=20),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) +
xlab(names$data[p]) +
ylab(names$descr[p]) +
scale_color_manual(values=leg.col) +
coord_fixed() +
ylim(c(0, max(temp$x, temp$y))) +
xlim(c(0, max(temp$x, temp$y)))
if(p < 3) temp$z <- round(temp$z/50)*50
else temp$z <- round(temp$z/50)*50
temp$error <- (temp$x - temp$y) / temp$x
# compute the Root Square Mean Error (RSME)
rsme <- NULL
for(sp in species){
zz <- unique(temp$z[temp$specie == sp])
temp1 <- data.frame(group = zz, value=numeric(length(zz)), specie=sp)
for(i in 1:length(zz)){
temp1$value[i] <- sqrt(sum(temp$error[temp$z == zz[i] & temp$specie == sp]^2) /
length(temp$error[temp$z == zz[i] & temp$specie == sp]))
}
rsme <- rbind(rsme, temp1)
}
rsme <- rsme[!is.infinite(rsme$value),]
pd <- position_dodge(width=10)
g2 <- ggplot(rsme, aes(group, value, colour=specie)) +
#geom_line(position = pd) +
geom_point(size=2, position = pd) +
stat_smooth(se = F, method="loess") +
theme_classic() +
theme(text=element_text(size=20),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) +
scale_y_continuous(limits = c(0, 1.5)) +
xlab("Total root length [cm]") +
ylab("RRSME [-]") +
scale_color_manual(values=leg.col)
lg <- get_legend(g2)
g2 <- g2 + theme(legend.position = "none")
g <- arrangeGrob(g1, g2, lg, widths=c(0.55, 0.35, 0.1), ncol=3)
ggsave(paste0(base.dir,"/00_data/figures/error-",pairs$data[p],".pdf"), g, width=14, height=4) +
ggsave(paste0(base.dir,"/00_data/figures/error-",pairs$data[p],".png"), g, width=14, height=4)
}
pca <- prcomp(data[,-c(ind.type.da, ind.tree)], retx = T, scale=T)  # Make the PCA
rs <- data.frame(pca$x)[,c(1,2)]    # Store the loadings
rs$specie <- data$specie
rs$image <- data$image
vars <- apply(pca$x, 2, var)
props <- round((vars / sum(vars) * 100), 1)
xl <- paste0("\nPrincipal Component 1 (",props[1],"%)")
yl <-paste0("Principal Component 2 (",props[2],"%)\n")
ggplot(data =rs, aes(x=PC1, y=PC2, colour=specie)) +
geom_point(alpha=0.8, size=2) +
stat_ellipse(level = 0.95, size=1.2, alpha=0.8) +
theme_classic() +
theme(text = element_text(size=25),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))+
xlab(xl) +
ylab(yl) +
#scale_shape_manual(values = c(19,1)) +
scale_colour_manual(values=leg.col)
library(ggplot2)
rs <- data.frame(pca$x)[,c(1,2)]    # Store the loadings
rs$specie <- data$specie
rs$image <- data$image
vars <- apply(pca$x, 2, var)
props <- round((vars / sum(vars) * 100), 1)
xl <- paste0("\nPrincipal Component 1 (",props[1],"%)")
yl <-paste0("Principal Component 2 (",props[2],"%)\n")
ggplot(data =rs, aes(x=PC1, y=PC2, colour=specie)) +
geom_point(alpha=0.8, size=2) +
stat_ellipse(level = 0.95, size=1.2, alpha=0.8) +
theme_classic() +
theme(text = element_text(size=25),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))+
xlab(xl) +
ylab(yl) +
#scale_shape_manual(values = c(19,1)) +
scale_colour_manual(values=leg.col)
pca <- prcomp(data[,-c(ind.type.da, ind.tree, 5)], retx = T, scale=T)  # Make the PCA
, 5)], retx = T, scale=T)  # Make the PCA
rs <- data.frame(pca$x)[,c(1,2)]    # Store the loadings
rs$specie <- data$specie
rs$image <- data$image
vars <- apply(pca$x, 2, var)
props <- round((vars / sum(vars) * 100), 1)
xl <- paste0("\nPrincipal Component 1 (",props[1],"%)")
yl <-paste0("Principal Component 2 (",props[2],"%)\n")
ggplot(data =rs, aes(x=PC1, y=PC2, colour=specie)) +
geom_point(alpha=0.8, size=2) +
stat_ellipse(level = 0.95, size=1.2, alpha=0.8) +
theme_classic() +
theme(text = element_text(size=25),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))+
xlab(xl) +
ylab(yl) +
#scale_shape_manual(values = c(19,1)) +
scale_colour_manual(values=leg.col)
z2 <- data.frame(var_names = rownames(pca$rotation), pca$rotation[, 1:2])
z2$var_names <- gsub("_", " ", z2$var_names)
ggplot(data=z2, aes(0, 0, xend=PC1, yend=PC2)) +
geom_segment(col="grey", size=2, arrow = arrow(length = unit(0.5,"cm")), alpha=0.9) +
geom_text_repel(data=z2, aes(PC1, PC2, label=var_names), col="black", size=9) +
geom_point(aes(x=0, y=0), size=5, colour="grey") +
#scale_y_continuous(limits = c(-1, 0.3)) +
theme_classic() +
xlab(xl) + ylab(yl) +
theme(text = element_text(size=25), axis.line = element_line(size = 1.5),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))
library(ggplot2)
library(gridExtra)
library(shapes)
library(Momocs)
library(geomorph)
library(reshape2)
library(lattice)
library(latticeExtra)
library(MASS)
z2 <- data.frame(var_names = rownames(pca$rotation), pca$rotation[, 1:2])
z2$var_names <- gsub("_", " ", z2$var_names)
ggplot(data=z2, aes(0, 0, xend=PC1, yend=PC2)) +
geom_segment(col="grey", size=2, arrow = arrow(length = unit(0.5,"cm")), alpha=0.9) +
geom_text_repel(data=z2, aes(PC1, PC2, label=var_names), col="black", size=9) +
geom_point(aes(x=0, y=0), size=5, colour="grey") +
#scale_y_continuous(limits = c(-1, 0.3)) +
theme_classic() +
xlab(xl) + ylab(yl) +
theme(text = element_text(size=25), axis.line = element_line(size = 1.5),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))
library(ggrepel)
z2 <- data.frame(var_names = rownames(pca$rotation), pca$rotation[, 1:2])
z2$var_names <- gsub("_", " ", z2$var_names)
ggplot(data=z2, aes(0, 0, xend=PC1, yend=PC2)) +
geom_segment(col="grey", size=2, arrow = arrow(length = unit(0.5,"cm")), alpha=0.9) +
geom_text_repel(data=z2, aes(PC1, PC2, label=var_names), col="black", size=9) +
geom_point(aes(x=0, y=0), size=5, colour="grey") +
#scale_y_continuous(limits = c(-1, 0.3)) +
theme_classic() +
xlab(xl) + ylab(yl) +
theme(text = element_text(size=25), axis.line = element_line(size = 1.5),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'))
#---------------------------------------------------------------
#---------------------------------------------------------------
# GENERAL PARAMETERS FOR THE ANALYSIS
#---------------------------------------------------------------
#---------------------------------------------------------------
compute.raw.data   <- F                            # If the shape analysis has already been done, put FALSE to reuse the generated datafile
color.plot         <- T                             # Make the plots in color
species            <- c("dicot","monocot")             # the type of species to analyse
base.dir           <- "~/Dropbox/research/projects/research/0_segment/segment_scripts"
n                  <- 500                              # This is the number of simulated root systems
setwd(paste0(base.dir,"/00_data/results"))
#---------------------------------------------------------------
#---------------------------------------------------------------
# LOADING LIBRARIES
#---------------------------------------------------------------
#---------------------------------------------------------------
library(ggplot2)
library(gridExtra)
library(shapes)
library(Momocs)
library(geomorph)
library(reshape2)
library(lattice)
library(latticeExtra)
library(MASS)
library(ggrepel)
#---------------------------------------------------------------
#---------------------------------------------------------------
# HOME MADE FUNCTIONS
#---------------------------------------------------------------
#---------------------------------------------------------------
leg.col <- c("black", "grey50")
ramp.corr <- colorRamp(c("black", "white", "black"))
ramp <- colorRamp(c("white", "black"))
if(color.plot){
leg.col <- c("#FF605D", "#52A8F9")
ramp <- colorRamp(c("white", "lightblue", "red"))
ramp.corr <- colorRamp(c("blue", "white", "red"))
}
getGroup <- function(name){
n1 <- gsub("/Users/guillaumelobet/Desktop/Work/segment/outputs/monocot/rsml/", "", name)
strsplit(n1, "-")[[1]][3]
}
getID <- function(name){
n1 <- gsub("/Users/guillaumelobet/Desktop/Work/segment/outputs/monocot/rsml/", "", name)
strsplit(n1, "-")[[1]][4]
}
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
z2 <- data.frame(var_names = rownames(pca$rotation), pca$rotation[, 1:2])
z2$var_names <- gsub("_", " ", z2$var_names)
ggplot(data=z2, aes(0, 0, xend=PC1, yend=PC2)) +
geom_segment(col="grey", size=2, arrow = arrow(length = unit(0.5,"cm")), alpha=0.9) +
geom_text_repel(data=z2, aes(PC1, PC2, label=var_names), col="black", size=9) +
geom_point(aes(x=0, y=0), size=5, colour="grey") +
#scale_y_continuous(limits = c(-1, 0.3)) +
theme_classic() +
xlab(xl) + ylab(yl) +
theme(text = element_text(size=25), axis.line = element_line(size = 1.5),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid')) +
ggsave(file=paste0(base.dir,"/00_data/figures/pca-loadings.pdf"), width = 10, height = 10)
